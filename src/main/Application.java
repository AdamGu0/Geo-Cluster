/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import DBscan.DBScan;
import DBscan.Tuple;
import gridgrowing.GridClustering;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JScrollBar;
import javax.swing.filechooser.FileFilter;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author AdamGu0
 */
public class Application extends javax.swing.JFrame {

    /**
     * Creates new form Application
     */
    public Application() {
        initComponents();

        rd = new ReadData();

        clusterPanel = new ClusterPanel(rd);
        tabbedViewerPanel.addTab("2D", clusterPanel);
        mapKit = new MapKit();
        tabbedViewerPanel.addTab("Geo", mapKit);

        //fold clustering panels
        dbScanRadio.setSelected(false);
        kMeansRadio.setSelected(false);
        smartSwapRadio.setSelected(false);
        gridGrowingRadio.setSelected(false);
        markerClustererRadio.setSelected(false);

        setMapResultUpdate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        stateLabel = new javax.swing.JLabel();
        tabbedViewerPanel = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        dimensionsLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        pointsLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        dataTypeLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        clustersLabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        mseLabel = new javax.swing.JLabel();
        chLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        algorithmLabel = new javax.swing.JLabel();
        exportButton = new javax.swing.JButton();
        settingScrollPane = new javax.swing.JScrollPane();
        settingPanel = new javax.swing.JPanel();
        dbScanPanel = new javax.swing.JPanel();
        dbScanSettingPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        minPtsTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        epsTextField = new javax.swing.JTextField();
        dbscanButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        dbScanSelectPanel = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        dbScanRadio = new javax.swing.JRadioButton();
        kMeansPanel = new javax.swing.JPanel();
        kMeansSettingPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        kMeansTextField = new javax.swing.JTextField();
        iterationsTextField = new javax.swing.JTextField();
        kMeansButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        kMeansSelectPanel = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        kMeansRadio = new javax.swing.JRadioButton();
        smartSwapPanel = new javax.swing.JPanel();
        smartSwapSettingPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        smartSwapTextField = new javax.swing.JTextField();
        smartSwapButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        smartSwapSelectPanel = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        smartSwapRadio = new javax.swing.JRadioButton();
        gridGrowingPanel = new javax.swing.JPanel();
        gridGrowingSettingPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        mTextField = new javax.swing.JTextField();
        optionComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        nxTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        nyTextField = new javax.swing.JTextField();
        gridGrowingButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        gridGrowingSelectPanel = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        gridGrowingRadio = new javax.swing.JRadioButton();
        markerClustererPanel = new javax.swing.JPanel();
        markerClustererSettingPanel = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        gridSizeLabel = new javax.swing.JLabel();
        gridSizeSlider = new javax.swing.JSlider();
        markerClustererButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        markerClustererSelectPanel = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        markerClustererRadio = new javax.swing.JRadioButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        normalDataMenuItem = new javax.swing.JMenuItem();
        gpsDataMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Geo-Cluster");

        stateLabel.setText("   ");
        stateLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tabbedViewerPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel5.setPreferredSize(new java.awt.Dimension(600, 600));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Data"));

        jLabel10.setText("Data File:");

        fileTextField.setEditable(false);
        fileTextField.setText("Please open a data file.");

        dimensionsLabel.setText("N/A");

        jLabel12.setText("Dimensions:");

        pointsLabel.setText("N/A");

        jLabel11.setText("Points:");

        jLabel18.setText("Data type:");

        dataTypeLabel.setText("N/A");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(pointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dimensionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(fileTextField))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(pointsLabel)
                    .addComponent(jLabel12)
                    .addComponent(dimensionsLabel)
                    .addComponent(jLabel18)
                    .addComponent(dataTypeLabel))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));

        logTextArea.setEditable(false);
        logTextArea.setColumns(23);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        jLabel13.setText("Output:");

        jLabel14.setText("Clusters:");

        clustersLabel.setText("N/A");

        jLabel15.setText("MSE:");

        jLabel16.setText("CH:");

        jLabel17.setText("Time:");

        mseLabel.setText("N/A");
        mseLabel.setMaximumSize(new java.awt.Dimension(160, 16));

        chLabel.setText("N/A");

        timeLabel.setText("N/A");

        jLabel20.setText("Algorithm:");

        algorithmLabel.setText("N/A");

        exportButton.setText("export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clustersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(mseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(algorithmLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(exportButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(algorithmLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(clustersLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(mseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(chLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(timeLabel))
                .addGap(18, 18, 18)
                .addComponent(exportButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedViewerPanel.addTab("Info", jPanel5);

        settingScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        dbScanPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        dbScanPanel.setToolTipText("");

        jLabel1.setText("MinPts");

        minPtsTextField.setText("17");

        jLabel2.setText("eps");

        epsTextField.setText("22000");

        dbscanButton.setText("run");
        dbscanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbscanButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dbScanSettingPanelLayout = new javax.swing.GroupLayout(dbScanSettingPanel);
        dbScanSettingPanel.setLayout(dbScanSettingPanelLayout);
        dbScanSettingPanelLayout.setHorizontalGroup(
            dbScanSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dbScanSettingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbScanSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dbScanSettingPanelLayout.createSequentialGroup()
                        .addGroup(dbScanSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dbScanSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minPtsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(epsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dbScanSettingPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dbscanButton)))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        dbScanSettingPanelLayout.setVerticalGroup(
            dbScanSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbScanSettingPanelLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(dbScanSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(minPtsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbScanSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(epsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbscanButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dbScanSelectPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dbScanSelectPanelMouseReleased(evt);
            }
        });

        jLabel21.setText("DBScan Clustering");

        dbScanRadio.setSelected(true);
        dbScanRadio.setPreferredSize(new java.awt.Dimension(28, 28));
        dbScanRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dbScanRadioStateChanged(evt);
            }
        });

        javax.swing.GroupLayout dbScanSelectPanelLayout = new javax.swing.GroupLayout(dbScanSelectPanel);
        dbScanSelectPanel.setLayout(dbScanSelectPanelLayout);
        dbScanSelectPanelLayout.setHorizontalGroup(
            dbScanSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbScanSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(dbScanRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dbScanSelectPanelLayout.setVerticalGroup(
            dbScanSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbScanSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbScanSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dbScanRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dbScanPanelLayout = new javax.swing.GroupLayout(dbScanPanel);
        dbScanPanel.setLayout(dbScanPanelLayout);
        dbScanPanelLayout.setHorizontalGroup(
            dbScanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dbScanSettingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(dbScanSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        dbScanPanelLayout.setVerticalGroup(
            dbScanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dbScanPanelLayout.createSequentialGroup()
                .addComponent(dbScanSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(dbScanSettingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        kMeansPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel3.setText("K");

        jLabel4.setText("Iterations");

        kMeansTextField.setText("15");

        iterationsTextField.setText("100");

        kMeansButton.setText("run");
        kMeansButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kMeansButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kMeansSettingPanelLayout = new javax.swing.GroupLayout(kMeansSettingPanel);
        kMeansSettingPanel.setLayout(kMeansSettingPanelLayout);
        kMeansSettingPanelLayout.setHorizontalGroup(
            kMeansSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kMeansSettingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kMeansSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kMeansSettingPanelLayout.createSequentialGroup()
                        .addGroup(kMeansSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(kMeansSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(kMeansTextField)
                            .addComponent(iterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kMeansSettingPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(kMeansButton)))
                .addContainerGap())
            .addComponent(jSeparator2)
        );
        kMeansSettingPanelLayout.setVerticalGroup(
            kMeansSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kMeansSettingPanelLayout.createSequentialGroup()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(kMeansSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(kMeansTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kMeansSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(iterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kMeansButton)
                .addContainerGap())
        );

        kMeansSelectPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                kMeansSelectPanelMouseReleased(evt);
            }
        });

        jLabel22.setText("K-Means Clustering");

        kMeansRadio.setSelected(true);
        kMeansRadio.setPreferredSize(new java.awt.Dimension(28, 28));
        kMeansRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                kMeansRadioStateChanged(evt);
            }
        });

        javax.swing.GroupLayout kMeansSelectPanelLayout = new javax.swing.GroupLayout(kMeansSelectPanel);
        kMeansSelectPanel.setLayout(kMeansSelectPanelLayout);
        kMeansSelectPanelLayout.setHorizontalGroup(
            kMeansSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kMeansSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(kMeansRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        kMeansSelectPanelLayout.setVerticalGroup(
            kMeansSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kMeansSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kMeansSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(kMeansRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout kMeansPanelLayout = new javax.swing.GroupLayout(kMeansPanel);
        kMeansPanel.setLayout(kMeansPanelLayout);
        kMeansPanelLayout.setHorizontalGroup(
            kMeansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kMeansSettingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(kMeansSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        kMeansPanelLayout.setVerticalGroup(
            kMeansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kMeansPanelLayout.createSequentialGroup()
                .addComponent(kMeansSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(kMeansSettingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        smartSwapPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel5.setText("K");

        smartSwapTextField.setText("10");

        smartSwapButton.setText("run");
        smartSwapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smartSwapButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout smartSwapSettingPanelLayout = new javax.swing.GroupLayout(smartSwapSettingPanel);
        smartSwapSettingPanel.setLayout(smartSwapSettingPanelLayout);
        smartSwapSettingPanelLayout.setHorizontalGroup(
            smartSwapSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, smartSwapSettingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(smartSwapSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(smartSwapButton)
                    .addGroup(smartSwapSettingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(smartSwapTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );
        smartSwapSettingPanelLayout.setVerticalGroup(
            smartSwapSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, smartSwapSettingPanelLayout.createSequentialGroup()
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(smartSwapSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(smartSwapTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(smartSwapButton)
                .addContainerGap())
        );

        smartSwapSelectPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                smartSwapSelectPanelMouseReleased(evt);
            }
        });

        jLabel23.setText("SmartSwap Clustering");

        smartSwapRadio.setSelected(true);
        smartSwapRadio.setPreferredSize(new java.awt.Dimension(28, 28));
        smartSwapRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                smartSwapRadioStateChanged(evt);
            }
        });

        javax.swing.GroupLayout smartSwapSelectPanelLayout = new javax.swing.GroupLayout(smartSwapSelectPanel);
        smartSwapSelectPanel.setLayout(smartSwapSelectPanelLayout);
        smartSwapSelectPanelLayout.setHorizontalGroup(
            smartSwapSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smartSwapSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(smartSwapRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        smartSwapSelectPanelLayout.setVerticalGroup(
            smartSwapSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smartSwapSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smartSwapSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(smartSwapRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout smartSwapPanelLayout = new javax.swing.GroupLayout(smartSwapPanel);
        smartSwapPanel.setLayout(smartSwapPanelLayout);
        smartSwapPanelLayout.setHorizontalGroup(
            smartSwapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(smartSwapSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(smartSwapSettingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        smartSwapPanelLayout.setVerticalGroup(
            smartSwapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smartSwapPanelLayout.createSequentialGroup()
                .addComponent(smartSwapSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(smartSwapSettingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        gridGrowingPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel6.setText("M");

        mTextField.setText("31");

        optionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "random", "max values", "aliquot" }));

        jLabel7.setText("Seed");

        jLabel8.setText("Nx");

        nxTextField.setText("147");

        jLabel9.setText("Ny");

        nyTextField.setText("146");

        gridGrowingButton.setText("run");
        gridGrowingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridGrowingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gridGrowingSettingPanelLayout = new javax.swing.GroupLayout(gridGrowingSettingPanel);
        gridGrowingSettingPanel.setLayout(gridGrowingSettingPanelLayout);
        gridGrowingSettingPanelLayout.setHorizontalGroup(
            gridGrowingSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gridGrowingSettingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gridGrowingSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gridGrowingSettingPanelLayout.createSequentialGroup()
                        .addGroup(gridGrowingSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gridGrowingSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mTextField)
                            .addComponent(optionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gridGrowingSettingPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(gridGrowingButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gridGrowingSettingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator4)
        );
        gridGrowingSettingPanelLayout.setVerticalGroup(
            gridGrowingSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gridGrowingSettingPanelLayout.createSequentialGroup()
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(gridGrowingSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(mTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gridGrowingSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gridGrowingSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridGrowingButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridGrowingSelectPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                gridGrowingSelectPanelMouseReleased(evt);
            }
        });

        jLabel24.setText("GridGrowing Clustering");

        gridGrowingRadio.setSelected(true);
        gridGrowingRadio.setPreferredSize(new java.awt.Dimension(28, 28));
        gridGrowingRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gridGrowingRadioStateChanged(evt);
            }
        });

        javax.swing.GroupLayout gridGrowingSelectPanelLayout = new javax.swing.GroupLayout(gridGrowingSelectPanel);
        gridGrowingSelectPanel.setLayout(gridGrowingSelectPanelLayout);
        gridGrowingSelectPanelLayout.setHorizontalGroup(
            gridGrowingSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gridGrowingSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(gridGrowingRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        gridGrowingSelectPanelLayout.setVerticalGroup(
            gridGrowingSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gridGrowingSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gridGrowingSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gridGrowingRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout gridGrowingPanelLayout = new javax.swing.GroupLayout(gridGrowingPanel);
        gridGrowingPanel.setLayout(gridGrowingPanelLayout);
        gridGrowingPanelLayout.setHorizontalGroup(
            gridGrowingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gridGrowingSettingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(gridGrowingSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        gridGrowingPanelLayout.setVerticalGroup(
            gridGrowingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gridGrowingPanelLayout.createSequentialGroup()
                .addComponent(gridGrowingSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(gridGrowingSettingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        markerClustererPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel19.setText("Grid Size:");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gridSizeSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), gridSizeLabel, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridSizeSlider.setMinimum(30);
        gridSizeSlider.setValue(60);

        markerClustererButton.setText("run");
        markerClustererButton.setEnabled(false);
        markerClustererButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markerClustererButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout markerClustererSettingPanelLayout = new javax.swing.GroupLayout(markerClustererSettingPanel);
        markerClustererSettingPanel.setLayout(markerClustererSettingPanelLayout);
        markerClustererSettingPanelLayout.setHorizontalGroup(
            markerClustererSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markerClustererSettingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(markerClustererSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(markerClustererButton)
                    .addGroup(markerClustererSettingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(gridSizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator5)
        );
        markerClustererSettingPanelLayout.setVerticalGroup(
            markerClustererSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, markerClustererSettingPanelLayout.createSequentialGroup()
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(markerClustererSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(gridSizeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markerClustererButton)
                .addContainerGap())
        );

        markerClustererSelectPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                markerClustererSelectPanelMouseReleased(evt);
            }
        });

        jLabel25.setText("MarkerClusterer");

        markerClustererRadio.setSelected(true);
        markerClustererRadio.setPreferredSize(new java.awt.Dimension(28, 28));
        markerClustererRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                markerClustererRadioStateChanged(evt);
            }
        });

        javax.swing.GroupLayout markerClustererSelectPanelLayout = new javax.swing.GroupLayout(markerClustererSelectPanel);
        markerClustererSelectPanel.setLayout(markerClustererSelectPanelLayout);
        markerClustererSelectPanelLayout.setHorizontalGroup(
            markerClustererSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markerClustererSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(markerClustererRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        markerClustererSelectPanelLayout.setVerticalGroup(
            markerClustererSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markerClustererSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(markerClustererSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(markerClustererRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout markerClustererPanelLayout = new javax.swing.GroupLayout(markerClustererPanel);
        markerClustererPanel.setLayout(markerClustererPanelLayout);
        markerClustererPanelLayout.setHorizontalGroup(
            markerClustererPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(markerClustererSettingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(markerClustererSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        markerClustererPanelLayout.setVerticalGroup(
            markerClustererPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, markerClustererPanelLayout.createSequentialGroup()
                .addComponent(markerClustererSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(markerClustererSettingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout settingPanelLayout = new javax.swing.GroupLayout(settingPanel);
        settingPanel.setLayout(settingPanelLayout);
        settingPanelLayout.setHorizontalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kMeansPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(smartSwapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gridGrowingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(markerClustererPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dbScanPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        settingPanelLayout.setVerticalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dbScanPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kMeansPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(smartSwapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridGrowingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markerClustererPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        settingScrollPane.setViewportView(settingPanel);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        normalDataMenuItem.setMnemonic('o');
        normalDataMenuItem.setText("Open normal data");
        normalDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalDataMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(normalDataMenuItem);

        gpsDataMenuItem.setMnemonic('s');
        gpsDataMenuItem.setText("Open geo data");
        gpsDataMenuItem.setToolTipText("");
        gpsDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpsDataMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(gpsDataMenuItem);

        exportMenuItem.setMnemonic('a');
        exportMenuItem.setText("Export result");
        exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabbedViewerPanel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(settingScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(tabbedViewerPanel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stateLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedViewerPanel.getAccessibleContext().setAccessibleName("");

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void dbscanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbscanButtonActionPerformed
        mapKit.markerClusterer.startCluster = false;
        doDBScan();
    }//GEN-LAST:event_dbscanButtonActionPerformed

    private void kMeansButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kMeansButtonActionPerformed
        mapKit.markerClusterer.startCluster = false;
        doKMeans();
    }//GEN-LAST:event_kMeansButtonActionPerformed

    private void smartSwapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smartSwapButtonActionPerformed
        mapKit.markerClusterer.startCluster = false;
        doSmartSwap();
    }//GEN-LAST:event_smartSwapButtonActionPerformed

    private void gridGrowingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridGrowingButtonActionPerformed
        mapKit.markerClusterer.startCluster = false;
        doGridGrowing();
    }//GEN-LAST:event_gridGrowingButtonActionPerformed

    private void markerClustererButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markerClustererButtonActionPerformed
        switch (mapKit.markerClusterer.startMarkerCluster(data, gridSizeSlider.getValue())) {
            case 0:
                this.tabbedViewerPanel.setSelectedIndex(2);
                showResultInfo(mapKit.markerClusterer.clustersArray, mapKit.markerClusterer.duration, "MarkerClusterer");
                break;
            case 1:
                showWarning("There is no loaded file.");
                break;
            case 2:
                showWarning("There is no point.");
                break;
            default:
                break;
        }
    }//GEN-LAST:event_markerClustererButtonActionPerformed

    private void normalDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalDataMenuItemActionPerformed
        loadFile(false);
    }//GEN-LAST:event_normalDataMenuItemActionPerformed

    private void gpsDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpsDataMenuItemActionPerformed
        loadFile(true);
    }//GEN-LAST:event_gpsDataMenuItemActionPerformed

    private void dbScanRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dbScanRadioStateChanged
        boolean selected = dbScanRadio.isSelected();
        dbScanSettingPanel.setVisible(selected);
        if (selected) {
            dbScanPanel.setBorder(BorderFactory.createLoweredBevelBorder());
        } else {
            dbScanPanel.setBorder(BorderFactory.createRaisedBevelBorder());
        }
    }//GEN-LAST:event_dbScanRadioStateChanged

    private void dbScanSelectPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dbScanSelectPanelMouseReleased
        dbScanRadio.setSelected(!dbScanRadio.isSelected());
    }//GEN-LAST:event_dbScanSelectPanelMouseReleased

    private void kMeansRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_kMeansRadioStateChanged
        boolean selected = kMeansRadio.isSelected();
        kMeansSettingPanel.setVisible(selected);
        if (selected) {
            kMeansPanel.setBorder(BorderFactory.createLoweredBevelBorder());
        } else {
            kMeansPanel.setBorder(BorderFactory.createRaisedBevelBorder());
        }
    }//GEN-LAST:event_kMeansRadioStateChanged

    private void kMeansSelectPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kMeansSelectPanelMouseReleased
        kMeansRadio.setSelected(!kMeansRadio.isSelected());
    }//GEN-LAST:event_kMeansSelectPanelMouseReleased

    private void smartSwapRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_smartSwapRadioStateChanged
        boolean selected = smartSwapRadio.isSelected();
        smartSwapSettingPanel.setVisible(selected);
        if (selected) {
            smartSwapPanel.setBorder(BorderFactory.createLoweredBevelBorder());
        } else {
            smartSwapPanel.setBorder(BorderFactory.createRaisedBevelBorder());
        }
    }//GEN-LAST:event_smartSwapRadioStateChanged

    private void smartSwapSelectPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_smartSwapSelectPanelMouseReleased
        smartSwapRadio.setSelected(!smartSwapRadio.isSelected());
    }//GEN-LAST:event_smartSwapSelectPanelMouseReleased

    private void gridGrowingRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gridGrowingRadioStateChanged
        boolean selected = gridGrowingRadio.isSelected();
        gridGrowingSettingPanel.setVisible(selected);
        if (selected) {
            gridGrowingPanel.setBorder(BorderFactory.createLoweredBevelBorder());
        } else {
            gridGrowingPanel.setBorder(BorderFactory.createRaisedBevelBorder());
        }
    }//GEN-LAST:event_gridGrowingRadioStateChanged

    private void gridGrowingSelectPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridGrowingSelectPanelMouseReleased
        gridGrowingRadio.setSelected(!gridGrowingRadio.isSelected());
    }//GEN-LAST:event_gridGrowingSelectPanelMouseReleased

    private void markerClustererRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_markerClustererRadioStateChanged
        boolean selected = markerClustererRadio.isSelected();
        markerClustererSettingPanel.setVisible(selected);
        if (selected) {
            markerClustererPanel.setBorder(BorderFactory.createLoweredBevelBorder());
        } else {
            markerClustererPanel.setBorder(BorderFactory.createRaisedBevelBorder());
        }
    }//GEN-LAST:event_markerClustererRadioStateChanged

    private void markerClustererSelectPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_markerClustererSelectPanelMouseReleased
        markerClustererRadio.setSelected(!markerClustererRadio.isSelected());
    }//GEN-LAST:event_markerClustererSelectPanelMouseReleased

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        exportResult();
    }//GEN-LAST:event_exportButtonActionPerformed

    private void exportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItemActionPerformed
        exportResult();
    }//GEN-LAST:event_exportMenuItemActionPerformed

    private void setIsGPSData(boolean isGPSData) {
        if (isGPSData) {
            dataTypeLabel.setText("GPS");
        } else {
            dataTypeLabel.setText("Normal");
        }
        this.isGPSData = isGPSData;
        markerClustererButton.setEnabled(isGPSData);
    }

    private void showResultInfo(Cluster[] clusters, long duration, String algorithm) {
        resultClusters = clusters;
        this.algorithm = algorithm;
        String a = algorithm + " Clustering";
        
        int length = clusters.length;
        String str = "Algorithm: " + a + "\n\nThere are " + length + " clusters.\nCenters:\n";
        for (int i = 0; i < length; i++) {
            str += (i + 1) + ". " + clusters[i].centroid.toString() + "\n";
        }
        
        //get the mse
        double ssdAll = 0;
        for (Cluster c : clusters) {
            ssdAll += c.calcSsd();
        }
        double mse = ssdAll / data.length;
        
        //get the CH
        double ch = 0;
        if (length > 1) {
            double SSB = ClusterData.calcSSB(clusters, rd.isGPSData);
            if (length != 1) {
                ch = (SSB / (length - 1)) / mse; //why -1?
            }
        }
        
        algorithmLabel.setText(a);
        clustersLabel.setText(String.valueOf(length));
        mseLabel.setText(String.valueOf(mse));
        chLabel.setText(String.valueOf(ch));
        timeLabel.setText(String.valueOf(duration) + "ms");
        stateLabel.setText("Clusters:" + length + " MSE:" + mse + " CH:" + ch + " Time:" + duration + "ms");
        logTextArea.setText(str + "\nMSE:" + mse + "\nCH:" + ch + "\nTime:" + duration + "ms\n");
    }
    
    private void showResult(Cluster[] clusters) {
        if (rd.isGPSData) {
            tabbedViewerPanel.setSelectedIndex(2);
            mapKit.setWaypoints(clusters);
            clusterPanel.clusters = null;
            return;
        }
        
        mapKit.setWaypoints(null);
        if (rd.getVectorSize() != 2) {
            tabbedViewerPanel.setSelectedIndex(0);
            clusterPanel.clusters = null;
        } else {
            tabbedViewerPanel.setSelectedIndex(1);
            clusterPanel.showClusters(clusters);
        }
    }
    
    private void exportResult() {
        if (resultClusters == null) {
            showWarning("There is no result.");
            return;
        }
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("algorithm", algorithm);
        jsonObject.put("clusters", resultClusters.length);
        jsonObject.put("MSE", Double.valueOf(mseLabel.getText()));
        jsonObject.put("CH", Double.valueOf(chLabel.getText()));
        String time = timeLabel.getText();
        jsonObject.put("time", Integer.valueOf(time.substring(0, time.length() - 2)));
        for (Cluster c : resultClusters) {
            JSONArray vArray = new JSONArray();
            for (double v : c.centroid.vectors) {
                vArray.put(v);
            }
            jsonObject.append("centers", vArray);
        }

        SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
	String presentTime = df.format(new Date());
        
        String exportedFileName = fileName.substring(0, fileName.length() - 4) + "_" + algorithm + "_" + presentTime + ".json";
        try {
            FileOutputStream os = new FileOutputStream("data_export/" + exportedFileName);
            OutputStreamWriter writer = new OutputStreamWriter(os, "UTF-8");
            jsonObject.write(writer);
            writer.close();
            os.close();
            showWarning(exportedFileName + " exported.");
        } catch (Exception ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
            showWarning("File operation failed.");
        }
    }
    
    private void setMapResultUpdate() {
        mapKit.getMainMap().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mapResultUpdate();
            }
        });
        mapKit.getMainMap().addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            @Override
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                mapResultUpdate();
            }
        });
        mapKit.getZoomSlider().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mapResultUpdate();
            }
        });
        mapKit.getZoomInButton().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mapResultUpdate();
            }
        });
        mapKit.getZoomOutButton().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mapResultUpdate();
            }
        });
    }
    
    private void mapResultUpdate() {
        if (mapKit.markerClusterer.doMarkerCluster()) {
            showResultInfo(mapKit.markerClusterer.clustersArray, mapKit.markerClusterer.duration, "MarkerClusterer");
        }
    }

    private void cleanResult() {
        resultClusters = null;
        mapKit.markerClusterer.startCluster = false;
        mapKit.setWaypoints(null);
        clusterPanel.clusters = null;
        
        algorithm = null;
        String na = "N/A";
        algorithmLabel.setText(na);
        clustersLabel.setText(na);
        mseLabel.setText(na);
        chLabel.setText(na);
        timeLabel.setText(na);
        stateLabel.setText("");
        logTextArea.setText("");
    }
    
    private void loadFile(boolean isGPSData) {
        FileFilter filter;
        filter = new FileFilter() {
            @Override
            public boolean accept(File f) {
                return (f.isDirectory()
                        || f.getPath().toLowerCase().endsWith(".txt")
                        || f.getPath().toLowerCase().endsWith(".csv"));
            }

            @Override
            public String getDescription() {
                return "Data files(*.txt, *.csv)";
            }
        };
        JFileChooser file = new JFileChooser("dataset/");
        file.addChoosableFileFilter(filter);
        int result = file.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = file.getSelectedFile();
            if (selectedFile != null) {
                File dataFile = selectedFile;

                if (rd.readData(dataFile, isGPSData)) // check the validity of data
                {
                    showWarning("File loaded.");
                    data = rd.getPoints();
                    fileName = file.getSelectedFile().getName();
                    //this.setTitle(fileName);
                    fileTextField.setText(file.getSelectedFile().getAbsolutePath());
                    pointsLabel.setText(Integer.toString(data.length));
                    dimensionsLabel.setText(Integer.toString(rd.getVectorSize()));
                    setIsGPSData(isGPSData);
                    cleanResult();
                } else {
                    showWarning("File is invalid.");
                }
            }
        }
    }

    private void doDBScan() {

        //check the input data and parameters
        if (data == null) {
            showWarning("There is no loaded file.");
            return;
        } else if (data.length == 0) {
            showWarning("There is no point.");
            return;
        }

        //int dimension = 0;
        //dimension = data[0].vectorSize;
        if (minPtsTextField.getText().equals("") || epsTextField.getText().equals("")) {
            showWarning("Please input the MinPts and Eps.");
            return;
        }
        //set the algorithm parameters
        DBScan.Eps = Double.parseDouble(epsTextField.getText());
        DBScan.MinPts = Integer.parseInt(minPtsTextField.getText());

        long startDBScan = System.currentTimeMillis();
        DBScan dbscanAlgorithm = new DBScan();
        List<Tuple> tuples = new ArrayList<Tuple>();
        for (Point data1 : data) {
            tuples.add(new Tuple(rd.isGPSData, data1.vectors[0], data1.vectors[1]));
        }
        dbscanAlgorithm.setDataObjectsAndBuildRTree(tuples);
        dbscanAlgorithm.checkCorePoints();
        int clusterNumber = dbscanAlgorithm.dbscan();
        long duration = System.currentTimeMillis() - startDBScan;

        //get the clusters to be shown according to the result of 'dbscanAlgorithm.dbscan()'
        Cluster[] clusters = new Cluster[clusterNumber];
        for (int i = 0; i < clusterNumber; i++) {
            clusters[i] = new Cluster(rd.isGPSData, data[0].vectors.length);
            //clusters[i].setVectorSize(data[0].vectorSize);  //actually, it is the dimension of data(2)
            clusters[i].setVectorSize(2);
            //TODO: how to calculate the centroid?????
            //clusters[i].calcCentroid(null);
        }
        //loop the dbscanAlgorithm.dataObjects to get the tuples
        //whose clusterID is i, then transfer it to point and add to 
        //the cluster
        Iterator<Tuple> iterator = dbscanAlgorithm.dataObjects.iterator();
        int count = 0;
        while (iterator.hasNext()) {
            count++;
            Tuple tuple = iterator.next();
            if (tuple.clusterID >= 1) {
                //System.out.println("clusterID: "+ tuple.clusterID);
                double[] d = new double[2];
                d[0] = tuple.xValue;
                d[1] = tuple.yValue;
                clusters[tuple.clusterID - 1].pointsList.add(new Point(d, rd.isGPSData));
            }
        }
        // not sure if it is correct to set the centroid this way
        for (int i = 0; i < clusterNumber; i++) {
            clusters[i].calcCentroid(new Point(rd.isGPSData));
        }

        showResultInfo(clusters, duration, "DBScan");
        showResult(clusters);

        //save the DBscan cluster point in json file, for drawing point on googlemap
        //saveCluster(preFileName+"_DBscan", clusters, clusters.length);
    }

    private void doKMeans() {
        if (data == null) {
            showWarning("There is no loaded file.");
            return;
        } else if (data.length == 0) {
            showWarning("There is no point.");
            return;
        }

        if (kMeansTextField.getText().equals("") || iterationsTextField.getText().equals("")) {
            showWarning("Please input the number of clusters and steps.");
            return;
        }

        if (data != null) {
            int k;  // number of clusters
            int kIterations; // iterations for kmeans
            long start, end, duration; // start, end and duration of clustering method
            k = Integer.parseInt(kMeansTextField.getText());
            kIterations = Integer.parseInt(iterationsTextField.getText());
            ClusterData cd = new ClusterData(data, rd.isGPSData);
            start = System.currentTimeMillis();
            Cluster[] clusters = cd.kmeans(k, kIterations);
            end = System.currentTimeMillis();
            duration = end - start;

            showResultInfo(clusters, duration, "K-Means");
            showResult(clusters);

            //save the Kmeans cluster point in json file, for drawing point on googlemap
            //saveCluster(preFileName+"_KMeans", clusters, clusters.length);
        } else {
            showWarning("There is no loaded file.");
        }
    }

    private void doSmartSwap() {
        if (data == null) {
            showWarning("There is no loaded file.");
            return;
        } else if (data.length == 0) {
            showWarning("There is no point.");
            return;
        }

        if (smartSwapTextField.getText().equals("")) {
            showWarning("Please input the number of cluster.");
            return;
        }

        if (data != null) {
            int k;  // number of clusters
            long start, end, duration; // start, end and duration of clustering method

            k = Integer.parseInt(smartSwapTextField.getText());
            ClusterData cd = new ClusterData(data, rd.isGPSData);
            start = System.currentTimeMillis();
            Cluster[] clusters = cd.smartSwap(k);
            end = System.currentTimeMillis();
            duration = end - start;
            
            showResultInfo(clusters, duration, "SmartSwap");
            showResult(clusters);

            //save the SmartSwap cluster point in json file, for drawing point on googlemap
            //saveCluster(preFileName+"_SmartSwap", clusters, clusters.length);    
        } else {
            showWarning("There is no loaded file.");
        }
    }

    public void doGridGrowing() {
        //check the input data and parameters
        if (data == null) {
            showWarning("There is no loaded file.");
            return;
        } else if (data.length == 0) {
            showWarning("There is no point.");
            return;
        }

        if (mTextField.getText().equals("") || nxTextField.getText().equals("") || nyTextField.getText().equals("")) {
            showWarning("Please input all the parameters.");
            return;
        }

        if (Integer.parseInt(mTextField.getText()) < 1) {
            showWarning("The parameter of M is wrong.");
            return;
        }

        //set the algorithm parameters
        int mParameter = Integer.parseInt(mTextField.getText());
        int optionParameter = optionComboBox.getSelectedIndex();
        int nxParameter = Integer.parseInt(nxTextField.getText());
        int nyParameter = Integer.parseInt(nyTextField.getText());

        long startTime = System.currentTimeMillis();
        //transfer main.Point to sting.Point
        int dataNumber = data.length;
        gridgrowing.Point[] points = new gridgrowing.Point[dataNumber];
        for (int i = 0; i < data.length; i++) {
            double xValue = data[i].vectors[0];
            double yValue = data[i].vectors[1];
            gridgrowing.Point point = new gridgrowing.Point(xValue, yValue);
            points[i] = point;
        }

        GridClustering gc = new GridClustering(points, mParameter, nxParameter, nyParameter);
        if (gc.dataGridImage()) {
            gc.findSeeds(optionParameter);
        }
        gc.seedGrowing();
        gc.assignClusterIDtoPoints();
        long duration = System.currentTimeMillis() - startTime;
        //gc.printJ();

        Cluster[] clusters = new Cluster[gc.clustersNumber];
        for (int i = 0; i < gc.clustersNumber; i++) {
            clusters[i] = new Cluster(rd.isGPSData, data[0].vectors.length);
        }
        for (int i = 0; i < gc.data.length; i++) {
            if (gc.data[i].clusterID > 0) {
                //System.out.println("clusterID: "+ gc.data[i].clusterID);
                double d[] = new double[2];
                d[0] = gc.data[i].xValue;
                d[1] = gc.data[i].yValue;
                main.Point point = new main.Point(d, rd.isGPSData);
                clusters[gc.data[i].clusterID - 1].pointsList.add(point);
            }
        }

        //clean empty clusters by AdamGu0
        ArrayList<Cluster> clusterList = new ArrayList<>();
        for (Cluster c : clusters) {
            if (c.pointsList.isEmpty()) continue;
            c.calcCentroid(new Point(rd.isGPSData));
            clusterList.add(c);
        }
        clusters = new Cluster[clusterList.size()];
        for (int i = 0; i < clusterList.size(); i++) {
            clusters[i] = clusterList.get(i);
        }
        
        showResultInfo(clusters, duration, "GridGrowing");
        showResult(clusters);

        //save the GridGrowing cluster point in json file, for drawing point on googlemap
        // saveCluster(preFileName+"_GridGrowing", clusters, clusters.length);
    }

    private void showWarning(String text) {
        stateLabel.setText(text);
    }

    private boolean isGPSData;
    private ReadData rd;
    private Point[] data; // extracted data of points from file
    private String algorithm;
    private String fileName;
    private ClusterPanel clusterPanel;
    private MapKit mapKit;
    private Cluster[] resultClusters;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JLabel algorithmLabel;
    private javax.swing.JLabel chLabel;
    private javax.swing.JLabel clustersLabel;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JLabel dataTypeLabel;
    private javax.swing.JPanel dbScanPanel;
    private javax.swing.JRadioButton dbScanRadio;
    private javax.swing.JPanel dbScanSelectPanel;
    private javax.swing.JPanel dbScanSettingPanel;
    private javax.swing.JButton dbscanButton;
    private javax.swing.JLabel dimensionsLabel;
    private javax.swing.JTextField epsTextField;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JButton exportButton;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JMenuItem gpsDataMenuItem;
    private javax.swing.JButton gridGrowingButton;
    private javax.swing.JPanel gridGrowingPanel;
    private javax.swing.JRadioButton gridGrowingRadio;
    private javax.swing.JPanel gridGrowingSelectPanel;
    private javax.swing.JPanel gridGrowingSettingPanel;
    private javax.swing.JLabel gridSizeLabel;
    private javax.swing.JSlider gridSizeSlider;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextField iterationsTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JButton kMeansButton;
    private javax.swing.JPanel kMeansPanel;
    private javax.swing.JRadioButton kMeansRadio;
    private javax.swing.JPanel kMeansSelectPanel;
    private javax.swing.JPanel kMeansSettingPanel;
    private javax.swing.JTextField kMeansTextField;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField mTextField;
    private javax.swing.JButton markerClustererButton;
    private javax.swing.JPanel markerClustererPanel;
    private javax.swing.JRadioButton markerClustererRadio;
    private javax.swing.JPanel markerClustererSelectPanel;
    private javax.swing.JPanel markerClustererSettingPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField minPtsTextField;
    private javax.swing.JLabel mseLabel;
    private javax.swing.JMenuItem normalDataMenuItem;
    private javax.swing.JTextField nxTextField;
    private javax.swing.JTextField nyTextField;
    private javax.swing.JComboBox<String> optionComboBox;
    private javax.swing.JLabel pointsLabel;
    private javax.swing.JPanel settingPanel;
    private javax.swing.JScrollPane settingScrollPane;
    private javax.swing.JButton smartSwapButton;
    private javax.swing.JPanel smartSwapPanel;
    private javax.swing.JRadioButton smartSwapRadio;
    private javax.swing.JPanel smartSwapSelectPanel;
    private javax.swing.JPanel smartSwapSettingPanel;
    private javax.swing.JTextField smartSwapTextField;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTabbedPane tabbedViewerPanel;
    private javax.swing.JLabel timeLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
